# -*- coding: utf-8 -*-
"""flow_control.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQxE3ug57cTqXHGte9ah-8fEtAG_L5cK
"""

Lab | Flow Control
Exercise: Managing Customer Orders Optimized
In the last lab, you were starting an online store that sells various products. To ensure smooth operations, you developed a program that manages customer orders and inventory.

You did so without using flow control. Let's go a step further and improve this code.

Follow the steps below to complete the exercise:

Look at your code from the lab data structures, and improve repeated code with loops.

Instead of asking the user to input the name of three products that a customer wants to order, do the following:

a. Prompt the user to enter the name of a product that a customer wants to order.



b. Add the product name to the "customer_orders" set.

c. Ask the user if they want to add another product (yes/no).

d. Continue the loop until the user does not want to add another product.

Instead of updating the inventory by subtracting 1 from the quantity of each product, only do it for the products that were ordered (those in "customer_orders").

product = ['t-shirt', 'mug','hat' ,'book', 'Keychain']

inventory = {}


for product in product:
  availability = int(input(f"Please enter the {product} availability :"))

  inventory[product] = availability
print(inventory)

customer_orders = set()

order_1 = input("Enter the ordered product :")

customer_orders.add(order_1)

yes_no = input("Do you want to order more products? (yes/no)").lower()

while yes_no == 'yes':
  next_order = input("please enter the next product you want to order :")
  customer_orders.add(next_order)
  yes_no = input("Do you want to order more products? (yes/no)").lower()


for orders in customer_orders :
  if orders in inventory :
    inventory[orders] -=1
  else :
    print(f"Product{orders} is for sale.")

print(inventory)